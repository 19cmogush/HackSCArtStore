"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = require("..");
const big_integer_1 = __importDefault(require("big-integer"));
const xrp_currency_1 = __importDefault(require("./xrp-currency"));
/*
 * An issued currency on the XRP Ledger
 * @see: https://xrpl.org/basic-data-types.html#specifying-currency-amounts
 * @see: https://xrpl.org/currency-formats.html#issued-currency-amounts
 */
class XrplIssuedCurrency {
    /**
     * @param currency The currency used to value the amount.
     * @param value The value of the amount.
     * @param issuer Unique account address of the entity issuing the currency.
     */
    constructor(currency, value, issuer) {
        this.currency = currency;
        this.value = value;
        this.issuer = issuer;
    }
    /**
     * Constructs an XrplIssuedCurrency from an IssuedCurrencyAmount.
     *
     * @param issuedCurrency an IssuedCurrencyAmount (protobuf object) whose field values will be used
     *                       to construct an XrplIssuedCurrency
     * @returns an XrplIssuedCurrency with its fields set via the analogous protobuf fields.
     * @see https://github.com/ripple/rippled/blob/develop/src/ripple/proto/org/xrpl/rpc/v1/amount.proto#L28
     */
    static from(issuedCurrency) {
        var _a;
        const currency = issuedCurrency.getCurrency();
        if (!currency) {
            throw new __1.XrpError(__1.XrpErrorType.MalformedProtobuf, 'IssuedCurrency protobuf does not contain `currency` field.');
        }
        let value;
        try {
            value = big_integer_1.default(issuedCurrency.getValue());
        }
        catch (_b) {
            throw new __1.XrpError(__1.XrpErrorType.MalformedProtobuf, 'Cannot construct BigInt from IssuedCurrency protobuf `value` field.');
        }
        const issuer = (_a = issuedCurrency.getIssuer()) === null || _a === void 0 ? void 0 : _a.getAddress();
        if (!issuer) {
            throw new __1.XrpError(__1.XrpErrorType.MalformedProtobuf, 'IssuedCurrency protobuf does not contain `issuer` field.');
        }
        return new XrplIssuedCurrency(xrp_currency_1.default.from(currency), value, issuer);
    }
}
exports.default = XrplIssuedCurrency;
//# sourceMappingURL=xrpl-issued-currency.js.map